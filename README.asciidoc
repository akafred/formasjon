= Formasjon - the set-up of my virtual private server
:toc:

My goal is to automate configuration of everything on the server, while keeping it up and secure.


== The virtual private server

The virtual private server is delivered with a pretty minimal Debian stable/jessie (initially Debian 8.3), and can be accessed using ssh.


== Tools used in development

* https://www.vagrantup.com/docs/[Vagrant] and https://www.virtualbox.org/[VirtualBox] - installed on my Mac using http://brew.sh/[Homebrew]
* OpenSSH - for generating ssh-keys
* https://docs.ansible.com/ansible/index.html[Ansible] - for provisioning and running commands on server


== Development and staging VMs

To reduce the risk of making changes I use two local virtual machines (VMs running in VirtualBox). These are set up using Vagrant; see link:provision/Vagrantfile[the Vagrantfile] for details:

* `devmain` - I poke around in this one manually
* `localmain` - I use this for staging to make sure my automation works as it should. 

The installations of Debian in these VMs differ a little in the packages installed (they have more than the VPS), I'll guess I'll figure out how to handle that as I go along.


== First-time setup

=== SSH-keys for secure communication

To secure communication with the server I have generated a public/private key-pair using OpenSSH and copied them to the VMs and the VPS.

----
 cd provision // <1>
 ssh-keygen -t rsa -b 4096 -C "formasjon" // <2>
 ./copy-public-key-dev.sh // <3>
 ./copy-public-key-staging.sh
 ./copy-public-key-prod.sh <sshuser> <vps-server-ip>  // <4>
----
<1> I do provisioning operations in this folder
<2> Make sure to save the keys in the provision/ssh-folder
<3> I made a couple of helper scripts for doing the copying (yeah, I know, duplication)
<4> The user and IP is not in the "prod"-script

== Using Ansible

=== Inventory files

I use three inventory files for Ansible, link:provision/dev[`dev`], link:provision/staging[`staging`], and an encrypted one for link:provision/prod[`prod`]. The inventory files contain information about the server(s) in each environment and on how to connect to them. By encrypting the prod-inventory I can hide information is potentially sensitive. Ansible has a feature called http://docs.ansible.com/ansible/playbooks_vault.html[Ansible Vault] that makes it quite easy to work with.

To edit the prod inventory: `ansible-vault edit prod` 

If you get tired of typing the vault passphrase you can add: `--vault-password-file ~/.vault_pass` and store the passphrase there.

=== Ansible main playbook

My main playbook is called link:provision/site[`site`] and should be possible to run at all times.

The complete ansible command to run it is:

`ansible-playbook -v --vault-password-file ~/.vault_pass --key-file=ssh/id_rsa -i prod site.yml`

==== Ansible pre-reqs

My VPS did not have all the required packages to run Ansible most of the ansible modules (python being the most obvious missing piece).

To fix this I started with link:provision/roles/ansible-prereqs[a role for getting the prereq's in place].

==== Firewall using Uncomplicated Firewall (ufw) and fail2ban

I use https://wiki.debian.org/Uncomplicated%20Firewall%20(ufw)[ufw] for my firewall as it is a bit easier to use than iptables directly; ansible also has https://docs.ansible.com/ansible/ufw_module.html[a module for it]. The role has link:provision/roles/firewalled/tasks/main.yml[a simple set of tasks].

Also, to limit the chance of brute-forcing password-based SSH-users I added fail2ban. Thankfully someone has already created https://galaxy.ansible.com/nickjj/fail2ban/[a role for fail2ban] (pulled from https://galaxy.ansible.com/[Ansible Galaxy]), all I did was put it in my link:provision/base-setup.yml[base-setup], add some host-specific variables and press play.

=== Ansible command helpers

To repeatedly use some arguments when invoking ansible is a bit tedious so I have made a couple of helper scripts: 

* link:provision/run[`run`] - to run ansible commands, e.g `./run all -i dev -a "apt list --upgradeable"` or `./run all -i prod -m ping`
* link:provision/play[`play`] - to run ansible playbooks, e.g `./play all -i dev site.yml`

=== Upgrading packages

A first step in making my server a bit more secure is to upgrade packages. To check if there is a need I can do:

`./run all -i dev -a "apt list --upgradable"`

To upgrade I use link:provision/upgrade.yml[a very short Ansible playbook], to run the playbook I can do:

`./play -i dev upgrade.yml`

